const express = require('express');
const router = express.Router();
const authController = require('../controller/authController');
const { upload } = require('../controller/uploadController');
const userController = require('../controller/userController');
const productController = require('../controller/productController');
const jigController = require("../controller/jigController");
const roomPlanController = require("../controller/roomPlanController");
const userRolesController = require('../controller/userRolesController');
const menuController = require('../controller/menuController');
const shiftController = require('../controller/shiftController');
const processController = require('../controller/processController');
const planningAndSchedulingController = require('../controller/planningAndSchedulingController');
const holidayController = require('../controller/holidayController');
const assignedOperatorsToPlan = require('../controller/operatorTaskController');
const deviceController = require(`../controller/deviceController`);
const connectDB = require('../config/db');
const RoomPlan = require('../models/roomPlan');
const reportController = require('../controller/reportController');
const stickerController = require('../controller/stickerController');
const inventoryController = require('../controller/inventoryController');
const inventory = require('../models/inventoryManagement');
const productionManagerController = require('../controller/productionManagerController');
const skillManagementController = require('../controller/skillController');
const kitsController = require('../controller/kitsController');
connectDB();
router.get('/items', authController.getItems);
router.get('/product/view',authController.authenticateToken,productController.view);
router.get('/product/get/:id',authController.authenticateToken,productController.getProductByID);
router.get('/get-user-details', authController.authenticateToken,userController.getUserById);
router.delete('/product/delete/:id',authController.authenticateToken,productController.delete);
router.post('/product/delete/multiple',authController.authenticateToken,productController.deleteMultiple);
router.post('/login', authController.login);
router.post('/logout',authController.logout);
router.post('/register',authController.register);
router.post('/add/product', authController.authenticateToken,productController.create);
router.put('/product/update/:id', productController.update);
router.post('/upload-image/:userId', authController.authenticateToken,upload.single('profilePic'),userController.uploadProfilePicture);
router.post('/upload-cover-image/:userId', authController.authenticateToken,upload.single('coverPic'),userController.uploadCoverPicture);
router.get('/protected', authController.authenticateToken, authController.getProtectedData);
router.post('/jig/create', authController.authenticateToken,jigController.create);
router.post('/jig/category/create', authController.authenticateToken,jigController.createJigCategory);
router.get('/jig/view',authController.authenticateToken,jigController.view);
router.get('/jig/category/view',authController.authenticateToken,jigController.viewCategory);
router.delete('/jig/delete/:id',authController.authenticateToken,jigController.delete);
router.delete('/jig/category/delete/:id',authController.authenticateToken,jigController.deleteCategory);
router.post('/jig/delete/multiple',authController.authenticateToken,jigController.deleteJigMultiple);
router.post('/jig/categories/delete/multiple',authController.authenticateToken,jigController.deleteCategoryMultiple);
router.get(`/fetchJigsById/:id`,authController.authenticateToken,jigController.fetchJigsById);
router.post('/room-plan/create', authController.authenticateToken,roomPlanController.create);
router.get('/room-plan/view', authController.authenticateToken,roomPlanController.view);
router.delete('/room-plan/delete/:id', authController.authenticateToken,roomPlanController.deleteRoomPlan);
router.post('/room-plan/deleteRoomPlan', authController.authenticateToken,roomPlanController.deleteMultipleRoomPlan);
router.get('/room-plan/getRoomPlanByID/:id',authController.authenticateToken,roomPlanController.getRoomPlanByID)
router.put('/room-plan/getRoomPlanByID/update/:id',authController.authenticateToken, roomPlanController.update);
router.post('/user/create', authController.authenticateToken,userController.createUser);
router.get('/user/view',authController.authenticateToken,userController.getUsers);
router.delete('/user/delete/:id', authController.authenticateToken,userController.deleteUser);
router.post('/user/delete/multiple',authController.authenticateToken,userController.deleteUserMultiple);
router.put('/user/update/:id', authController.authenticateToken, userController.updateUser);
router.post('/user-roles/create', authController.authenticateToken,userRolesController.create);
router.get('/user-roles/view', authController.authenticateToken,userRolesController.view);
router.delete('/user-roles/delete/:id', authController.authenticateToken,userRolesController.deleteUserRole);
router.post('/user-roles/delete/multiple',authController.authenticateToken,userRolesController.deleteUserRoleMultiple);
router.get('/user-roles/get/:id',authController.authenticateToken,userRolesController.getUserRolesByID);
router.put('/roles/update/:id',authController.authenticateToken, userRolesController.update);
router.get('/user-type/get', authController.authenticateToken,userRolesController.getUserType);
router.get('/user-type/getPermissionByType', authController.authenticateToken,userRolesController.getUserTypeByType);
router.post('/menu/create', authController.authenticateToken,menuController.create);
router.get('/menu/get', authController.authenticateToken,menuController.view);
router.post('/shift/create', authController.authenticateToken,shiftController.create);
router.get('/shift/view', authController.authenticateToken,shiftController.view);
router.delete('/shift/delete/:id', authController.authenticateToken,shiftController.delete);
router.post('/shift/delete/multiple',authController.authenticateToken,shiftController.deleteUserRoleMultiple);
router.get('/shift/get/:id',authController.authenticateToken,shiftController.getShiftByID);
router.put('/shift/update/:id',authController.authenticateToken,shiftController.updateshift);
router.post('/process/create',authController.authenticateToken,processController.create);
router.get('/process/view', authController.authenticateToken,processController.view);
router.delete('/process/delete/:id', authController.authenticateToken,processController.delete);
router.post('/process/delete/multiple',authController.authenticateToken,processController.deleteProcessMultiple);
router.get('/process/get/:id',authController.authenticateToken,processController.getProcessByID);
router.put('/process/update/:id',authController.authenticateToken, processController.update);
router.post('/planing/get',authController.authenticateToken,planningAndSchedulingController.checkAvailability);
router.get('/planing/view', authController.authenticateToken,planningAndSchedulingController.view);
router.delete('/planing/delete/:id', authController.authenticateToken,planningAndSchedulingController.delete);
router.post('/planing/delete/multiple',authController.authenticateToken,planningAndSchedulingController.deletePlaningMultiple);
router.get('/planingAndScheduling/get/:id',authController.authenticateToken,planningAndSchedulingController.getPlaningAnDschedulingByID);
router.get('/planingAndScheduling/getPlaningAnDschedulingByProcessId/:id',authController.authenticateToken,planningAndSchedulingController.getPlaningAnDschedulingByProcessId);
router.put('/planingAndScheduling/update/:id',authController.authenticateToken,planningAndSchedulingController.update);
router.get('/holiday/view', authController.authenticateToken,holidayController.view);
router.post('/holiday/create',authController.authenticateToken,holidayController.create);
router.delete('/holiday/delete/:id', authController.authenticateToken,holidayController.delete);
router.post('/holiday/delete/multiple',authController.authenticateToken,holidayController.deleteHolidayMultiple);
router.post('/planing/getFromCurrentDate',authController.authenticateToken,planningAndSchedulingController.checkAvailabilityFromCurrentDate);
router.get('/planing/getPlaningAndSchedulingModel',authController.authenticateToken,planningAndSchedulingController?.fetchAllPlaningModel);
router.post('/planing/create',authController.authenticateToken,planningAndSchedulingController.create);
router.post('/process/log/create',authController.authenticateToken,processController.processLogs);
router.get('/process/logs/getLogsByProcessID/:id',authController.authenticateToken,planningAndSchedulingController.getProcessLogsByProcessId);
router.post('/assignPlanToOperator/create',authController.authenticateToken,assignedOperatorsToPlan.create);
router.get(`/assignPlanToOperator/view/:id`,authController.authenticateToken,assignedOperatorsToPlan.getTaskByUserID);
router.post('/devices/create', authController.authenticateToken,deviceController.create);
router.get('/devices/devicesByProductID/:id',authController.authenticateToken,deviceController.getDeviceByProductId);
router.post('/deviceRecord/create',authController.authenticateToken,deviceController.createDeviceTestEntry);
router.get('/getDeviceTestEntryByOperatorId/:id',authController.authenticateToken,deviceController.getDeviceTestEntryByOperatorId);
router.get('/deviceTestHistoryByDeviceId/:deviceId',authController.authenticateToken,deviceController.getDeviceTestHistoryByDeviceId);
router.patch('/updateStageByDeviceId/:deviceId',authController.authenticateToken,deviceController.updateStageByDeviceId);
router.post('/createReport',authController.authenticateToken,reportController.create);
router.get('/getOverallProgressByOperatorId/:planId/:operatorId',authController.authenticateToken,deviceController.getOverallProcessByOperatorId);
router.post('/sticker/fields/create', authController.authenticateToken,stickerController.createStickerField);
router.get('/sticker/fields/get',authController.authenticateToken,stickerController.getStickerField);
router.delete('/sticker/fields/delete/:id', authController.authenticateToken,stickerController.deleteStickerField);
router.post('/sticker/fields/delete/multiple',authController.authenticateToken,stickerController.deleteStickerFieldMultiple);
router.post('/devices/createIMEI',authController.authenticateToken,deviceController.createIMEI);
router.get('/devices/viewIMEI',authController.authenticateToken,deviceController.viewIMEI);
router.delete('/devices/deleteIMEI/:id', authController.authenticateToken,deviceController.deleteIMEI);
router.post('/devices/deleteIMEI/multiple',authController.authenticateToken,deviceController.deleteMultipleIMEI);
router.get('/inventory/view', authController.authenticateToken,inventoryController.view);
router.put('/inventory/update/:id',authController.authenticateToken, inventoryController.updateInventoryQuantity);
router.get('/inventory/process/get',authController.authenticateToken,inventoryController.getProcessInventory);
router.get('/inventory/dashboard',authController.authenticateToken,inventoryController.dashboard);
router.get('/inventory/getProcessByProduct/:id', authController.authenticateToken,inventoryController.getProcessByProductID);
router.put('/inventory/process/updateIssueKit', authController.authenticateToken, inventoryController.updateIssueKit);
router.put('/inventory/process/updateIssueCarton', authController.authenticateToken, inventoryController.updateCarton);
router.get('/production-manger/process/get', authController.authenticateToken,productionManagerController.getProcesses);
router.get('/production-manger/getRemainingKit', authController.authenticateToken,productionManagerController.getRemainingKitFromCompletedProcess);

router.put('/production-manager/process/updateProductionStatus', authController.authenticateToken,productionManagerController.updateProductionStatus);
router.get('/production-manager/processStatics/get', authController.authenticateToken,productionManagerController.processStatics);
router.put('/operator/updateOperatorSkillSet/:id', authController.authenticateToken, userController.updateOperatorSkillSet);
router.post('/skill-management/create',authController.authenticateToken,skillManagementController.create);
router.get('/skill-management/get', authController.authenticateToken, skillManagementController.getSkills);
router.put('/process/updateQuantity/:id', authController.authenticateToken,processController.updateMoreQuantity);
router.put('/process/updateMarkAsCompleted/:id', authController.authenticateToken,processController.updateMarkasCompletedProcess);
router.post('/production/returnKitsToStore', authController.authenticateToken,kitsController.createKitsEntry);
router.put('/store/updateKitsStatus/:id', authController.authenticateToken, kitsController.updateKitsStatus);
router.get('/process/viewReturnToStore', authController.authenticateToken,kitsController.viewReturnKitStore);
router.get('/operators/getVacantOperator', authController.authenticateToken, processController.getVacantOperator);
router.put('/operator/updateStatus/:id', authController.authenticateToken,processController.updateStatusAssignedOperator);
router.post('/planing/createAssignedJigs', authController.authenticateToken,assignedOperatorsToPlan.createJigAssignedToPlan)
router.put('/jig/updateStatus/:id', authController.authenticateToken,jigController.updateJigStatus);
module.exports = router;
